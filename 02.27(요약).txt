<02.27>

## 7차시 : 집합 자료형 -> set() 함수 사용-----------------------------------------------------------------------
s1 = set([1,2,3]) 
   # 콜론이 없는 중괄호 => 집합 자료형이다
   ## 1) 순서가 없음 2) 중복을 허용하지 않는다
s2 = set("Hello")


s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])
s1 & s2    # 교집합
s1 | s2    # 합집합
s1 - s2    # 차집합
s2 - s1

   ## 집합 전용 함수 
s1 = set([1,2,3])
s2 = set([3,4,5,6])
s1.add(4)   
s1.update([4,5,6])
s1.remove(2)
s1.union(s2)
s1.intersection(s2)   
print(3 in s1)  # 멤버 연산자

   ## 퀴즈
a = [1,1,1,2,2,2,3,3,3,4,4,5,5,5]
a = set(a)  #집합으로 중복숫자 제거
a = list(a) #리스트로 변환
a.sort()    #순서 정렬
a.reverse() #오름차순으로 정렬
a

   ## 확인문제
# list1 = [1,1,1,1,2,2,2,2,4,4,4,4,5,5,5,5,5,3,3,3,3]

# 리스트 값이 들어있는 변수 list1을 (5,4,3,2,1) 로 변환한 후, 

# set1 = set([3,4,5,6,7])

# 변수 set1과의 교집합, 합집합을 화면에 출력해보세요

list1 = [1,1,1,1,2,2,2,2,4,4,4,4,5,5,5,5,5,3,3,3,3]
list1 = set(list1)
list1 = list(list1)
list1.sort(reverse = True)
list1 = tuple(list1)
print(list1)

set1 = set([3,4,5,6,7])
print(set(list1) & set1)
print(set(list1) | set1)

## 8차시 : 불 자료형------------------------------------------------------------------------------------------------
    ## 비어 있으면 거짓 / 비어있지 않으면 참
print(bool(5))
print(bool(-5))
print(bool(0))
print(bool([]))
print(bool([1,2,3,4]))
print(bool(""))
print(bool("Hello"))
print(bool({"이름" : "홍길동"}))

    ## 확인문제
# 1. 5 > 3의 값을 변수 box에 추가해주세요.
# 2. 3 > 5의 값을 변수 box에 추가해주세요.
# 3. 5 == 5의 값을 변수 box에 추가해주세요.
# 4. 5 != 4의 값을 변수 box에 추가해주세요.
# 5. bool(5)의 값을 변수 box에 추가해주세요.
# 6. bool(0)의 값을 변수 box에 추가해주세요.
# 7. bool([1,3,5,4,2])의 값을 변수 box에 추가해주세요.
# 8. bool([])의 값을 변수 box에 추가해주세요.
# 9. bool({"이름" : "강동원"})의 값을 변수 box에 추가해주세요.
# 10. bool({"이름" : "강동원"})의 값을 변수 box에 추가해주세요.
# 11. 변수 box 안에 있는 True의 개수를 화면에 출력해주세요.

box = []
box.append(5 > 3)
box.append(3 > 5)
box.append(5 == 5)
box.append(5 != 4)
box.append(bool(5))
box.append(bool(0))
box.append(bool([1,3,5,4,2]))
box.append(bool([]))
box.append(bool({"이름" : "강동원"}))
box.append(bool({"이름" : "강동원"}))
print(box)
print(box.count(True))

## 9차시 : 변수 다루기 => 값 하나씩만 할당--------------------------------------------------------------------------------------
a,b = 3,5
a,b = [4,6]
(a,b) = (8,9)

a = b = "python"
print(a)
print(b)

a,b,*c = [1,2,3,4,5]   # * 나머지를 의미
print(a,b,c)
a,*b,c = [1,2,3,4,5]
print(a,b,c)

    ## 변수 복사
a = [1,2,3,5,4]
b = a      # b에 a를 복사
b[1] = 10
print(b)
print(a)   # 문제 발생!! -> a도 변함
print(a is b)  # 같은 변수인지를 확인함!! 

a = [1,3,5,4,2]
b = a[:]   # : 1) '처음부터 끝까지'라는 의미 2) 복사 => 리스트만 가능
b[1] = 10
print(b)
print(a)

a = [1,3,5,4,2]
b = [1,3,5,4,2]
print(a is b)  # 같은 값이지만 다른 변수임!!

    ## 변수 교환
a = 3
b = 5

a,b = b,a
print(a)
print(b)

    ## 확인문제
# 1. 코드 a, b = [1,3,5,4,2] 에서 에러가 발생하지 않도록 변수 a에는 1이, 변수 b에는 [3,5,4,2]가 할당되도록 코드를 수정해보세요.
# 2. 변수 a와 b의 값을 서로 교환후, 화면에 변수 a와 b를 출력해보세요.
# 3. 변수a에 있는 모든 값에 b의 값을 더한 후, 변수a를 화면에 출력해보세요.

# 1)
a, *b = [1,3,5,4,2]
print(a,b)

# 2)
a,b = b,a
print(a)
print(b)

# 3)
a[0] = a[0] + b
a[1] = a[1] + b
a[2] = a[2] + b
a[3] = a[3] + b
print(a)

## 10차시 : IF 조건문-----------------------------------------------------------------------------------------------------
    ## 조건부 표현식
score = 70
message = "success" if score >= 60 else "failure"   # 한줄로도 가능
print(message)

if score >= 60:
    message = "success"
else :
    message = "failure"
print(message)

    ## 예시 1)
money = 2000
card = True
if money >= 3000 or card == True:   # 논리연산자 or : 둘중 하나만 참
    print("taxi")
else:
    print("walk")

if money >= 3000 and card == True:   # 논리연산자 and : 둘다 참
    print("taxi")
else:
    print("walk")

    ## 예시 2)
pocket = ["paper","cellphone"]
card = True
if "money" in pocket:
    print("taxi")
else:
    if card == True:     # 이중 반복문
        print("taxi")
    else:
        print("walk")

if "money" in pocket:
    print("taxi")
elif card == True:        # 보기 좋게
    print("taxi")
else:
    print("walk")

    ## 확인문제
# 변수 score 값이 90점 이상이면 'A', 80점 이상이면 'B', 70점 이상이면 'C', 60점 이상이면 'D', 
# 그 이하 나머지는  'F'를 출력하는 코드를 작성해보세요 

score = 64.5

if score >= 90:
    print("A")
elif score >= 80:
    print("B")
elif score >= 70:
    print("C")
elif score >= 60:
    print("D")
else:
    print("F")

## 11차시 : while문 -> 거짓이 될때까지 실행---------------------------------------------------------------------------------------
    ## 반복문 강제로 빠져나가기 : break 키워드
    ## 반복문 맨 처음으로 돌아가기 : continue 키워드

    ## 예시 1)
hit = 0
while hit < 10:
    hit += 1
    print("나무를 {}번 찍었습니다.".format(hit))
    if hit == 10:
        print("나무가 쓰러졌습니다.")

    ## 예시 2)
coffee = 10
while True:      # True 이므로 계속 실행 -> 마이너스로 무한 반복
    coffee -= 1
    print("커피를 한잔 팔고, {}잔 남았습니다.".format(coffee))
    if coffee == 0:
        print("매진되었습니다")
        break    # 강제 종료

    ## 예시 3)
a = 0
while a < 10:
    a += 1
    if a % 2 == 0:
        continue       # a가 짝수면 continue를 만나 다시 while문으로 올라감
    print(a)           # 홀수만 출력

    ## 확인문제
    # 1. while문을 사용해서 1부터 1000까지 3의 배수의 합을 구해보세요.
    # 2. while문을 사용해서 1부터 100까지 더하는 코드를 작성 후, 결과값을 화면에 출력해보세요. 

    # 1)
a = 0
b = 0
while a < 1000:
    a += 1
    if a % 3 == 0:
        b = b + a
print(b)

    # 2)
a = 0
b = 0
while a < 100:
    a += 1
    b += a
print(b)

## 12차시 : for문-------------------------------------------------------------------------------------------------
for i in "Hello":
    print(i)
for i in ["홍길동","이순신","아이유"]:
    print(i)

dic = {"이름":"홍길동","성별":"남자","나이":30}
for i in dic:
    print(i)    # 딕셔너리는 무조건 key값 기준!!
for i in dic.values():
    print(i) 

for i in range(1,11,2):
    print(i)

for i in range(2,10):
    for j in range(1,10):
        print("{} X {} = {}".format(i,j,i*j))   # 구구단

    ## 리스트 내포(리스트 안에 for문)
box = [i for i in range(1,7) if i % 2 == 0]
print(box)

box = [5 for i in range(10)]
print(box)  # 5만 넣음

    ## 예제 1)
box = [[1,2],[3,4],[5,6]]
for i,j in box:
    print(i*j)

a = 0
for i in range(1,1001):
    a += i
print(a)

    ## 확인문제
# 로또 번호는 1번부터 45번까지 존재하고, 중복되지 않은 6개의 조합으로 당첨번호를 추첨합니다. 
# 로또 당첨 번호가 총 몇 개의 조합이 있는 지 for문을 사용해서 로또 당첨 번호의 총 개수를 구해보세요

# 1)
count = 0
for a in range(1,46):
    for b in range(a+1,46):
        for c in range(b+1,46):
            for d in range(c+1,46):
                for e in range(d+1,46):
                    for f in range(e+1,46):
                        count += 1
print(count)
